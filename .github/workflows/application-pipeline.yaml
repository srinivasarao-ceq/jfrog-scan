name: Application-complete-pipeline
on:
  # push:
  #   branches:
  #     - main
  # pull_request:
  #   types: [opened, synchronize, reopened]
  pull_request_target:
    types: [opened, synchronize]
  workflow_dispatch:
permissions:
  pull-requests: write
  contents: read
jobs:
  scan-pull-request-Frogbot:
    runs-on: ubuntu-latest
    # A pull request needs to be approved before Frogbot scans it. Any GitHub user who is associated with the
    # "frogbot" GitHub environment can approve the pull request to be scanned.
    environment: frogbot
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: jfrog/frogbot@v2
        env:
          # [Mandatory]
          # JFrog platform URL
          JF_URL: ${{ secrets.JF_URL }}

          # [Mandatory if JF_USER and JF_PASSWORD are not provided]
          # JFrog access token with 'read' permissions on Xray service
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build:
    name: Build and scan
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
          
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"dotnet-scanning" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
  Jfrog-scanning:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4
          
        - name: configure Jfrog CLI
          uses: jfrog/setup-jfrog-cli@v3
          env:
            # JFrog platform url (for example: https://acme.jfrog.io)
            JF_URL: ${{ secrets.JF_URL }}
           
            # Basic authentication credentials
            JF_USER: ${{ secrets.JF_USER }}
            JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
       
        - name: Run JFrog Scan
          id: jfrog-scan
          run: jf audit 
  
        # - name: Run dotnet
        #   run: |
        #     mkdir -p /home/runner/.ssh/
        #     touch /home/runner/.ssh/id_rsa.pem
        #     echo -e "${{secrets.key}}" > /home/runner/.ssh/id_rsa.pem
        #     chmod 600 /home/runner/.ssh/id_rsa.pem
        #     ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /home/runner/.ssh/id_rsa.pem ec2-user@13.127.184.252 
        #     sudo dotnet --version
        #     sudo dotnet run
